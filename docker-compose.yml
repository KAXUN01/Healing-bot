version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

networks:
  healing-network:
    driver: bridge

services:
  incident-bot:
    build:
      context: ./incident-bot
      dockerfile: Dockerfile
    container_name: incident-bot
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - LOG_LEVEL=INFO
      - MODEL_HOST=model
    networks:
      - healing-network
    restart: unless-stopped
    depends_on:
      model:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging: *default-logging

  model:
    build:
      context: ./model
      dockerfile: Dockerfile
    container_name: ddos-model
    ports:
      - "8080:8080"
    volumes:
      - ./model/ddos_model.keras:/app/ddos_model.keras:ro
      - ./model/visualizations:/app/visualizations
      - model-cache:/app/cache
    environment:
      - MODEL_PORT=8080
      - MODEL_HOST=0.0.0.0
      - LOG_LEVEL=INFO
      - TENSORFLOW_CACHE=/app/cache
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    networks:
      - healing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging: *default-logging

  server:
    build:
      context: ./monitoring/server
      dockerfile: Dockerfile
    container_name: monitoring-server
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - HOST=0.0.0.0
      - MODEL_HOST=model
      - MODEL_PORT=8080
      - PROMETHEUS_MULTIPROC_DIR=/tmp
      - FLASK_ENV=production
      - TZ=UTC
    volumes:
      - ./monitoring/server/static:/app/static:ro
      - ./monitoring/server/templates:/app/templates:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    depends_on:
      model:
        condition: service_healthy
    networks:
      - healing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging


  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - healing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.1.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - healing-network
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging

  network-analyzer:
    build:
      context: ./monitoring/server
      dockerfile: Dockerfile
    container_name: network-analyzer
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - LOG_LEVEL=INFO
    volumes:
      - ./monitoring/server/blocked_ips.db:/app/blocked_ips.db
    networks:
      - healing-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/active-threats"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging

  dashboard:
    build:
      context: ./monitoring/dashboard
      dockerfile: Dockerfile
    container_name: ml-dashboard
    ports:
      - "3001:3001"
    environment:
      - DASHBOARD_PORT=3001
      - MODEL_HOST=model
      - MODEL_PORT=8080
      - NETWORK_ANALYZER_HOST=network-analyzer
      - NETWORK_ANALYZER_PORT=8000
      - LOG_LEVEL=INFO
    networks:
      - healing-network
    restart: unless-stopped
    depends_on:
      - model
      - network-analyzer
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  model-cache:
    driver: local